+ Next


+ RUN PROJECT

    cd frontend 

        npm i 

        npm run dev 

    cd backend 
    
        npm i 

        npm run dev 


+ FOLDER STRUCTURE (Frontend)

    src/pages: 

        ChatPage.jsx 

        Login.jsx

        RegisterAccount.jsx 

    src/components: 

        Layout.jsx

        Button.jsx

        Separator.jsx

        TextInput.jsx

        AuthRequired.jsx

    src/context: 

        AuthContext.jsx

    src/utils 

        functions.jsx
        
            await callPostAPI("/api/auth/login", {username: value1, password: value2})


+ FOLDER STRUCTURE (Backend)

    ./server.js

    ./controllers

        user.js

    ./routes

        user.js

    ./utils

        functions.js

    ./middleware/authRequired.js


+  ROUTER (Frontend)

    /register-account

    /login

    / -> will be redirected to /chat-page

    /chat-page


+  ROUTER (Backend)

    /api/auth/login

    /api/auth/register

    /api/auth/verifyToken


+ LEARNING

    Placeholder Route 

        <Route path="/" element={<Navigate to="/chat-page" replace />} />

    Tailwind CSS Properties  

        // Plain CSS 
        border: 2px solid #323232;
        box-shadow: 4px 4px #323232;

        // Tailwind CSS
        border-2 border-solid border-[#323232] shadow-[4px_4px_#323232]

    Tailwind CSS Group 

        <button className="group">
            <div className="w-[100%] group-hover:w-full"></div>
        </button>

    Flex Box: grow elements to take up the remaining space of the box

        <div class="flex justify-center w-full">
            <div class="grow">Left</div>
            <div>Middle</div>
            <div class="grow">Right</div>
        </div>

    Schema and Model in MongoDB 

        + Schema: a blueprint of how individual documents in a collection should look

            const mongoose = require('mongoose')

            const Schema = mongoose.Schema

            const userSchema = new Schema({
                username: { type: String, required: true, unique: true },
                password: { type: String, required: true },
                createdAt: { type: Date, default: Date.now },
            })

        + Model: a compiled version of the schema and acts as the interface to the collection

            // This creates a model named User that maps to the "users collection" in the MongoDB database
            const User = mongoose.model('User', userSchema)

































